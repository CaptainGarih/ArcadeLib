#       ArcadeLib
#       By CaptainGarih / DISCORD: garih

options:

    arcadelib.config.prefix: "&aArcade&eLib &b|"
    arcadelib.config.prefix.error: "&aArcade&eLib &b| &cERROR &e|"
    arcadelib.config.prefix.database: "&aArcade&eLib &b| &bDATABASE &e|"
    arcadelib.version: "DEV-1.0.0a"

on load:

    send "&aArcade&eLib &b| &aLoaded ArcadeLib.sk &fVersion %{@arcadelib.version}%" to console

on unload:

    send "&aArcade&eLib &b| &cUnloaded ArcadeLib.sk &fVersion %{@arcadelib.version}%" to console

#=================================
#       Libraries
#=================================

#Purge data
function ArcadeLib_PurgeData() :: boolean:

    loop {arcadelib.data.games?::*}:

        send "%{@arcadelib.config.prefix.database}% &fDeleted &e%loop-value% &ffrom database." to console
        remove loop-value from {arcadelib.data.games?::*}

    clear {arcadelib.data.games?::*}

    return true

#Create a game
#   game_name: Name of the game
function ArcadeLib_CreateGame(game_name: text) :: boolean:

    if {arcadelib.data.games?::*} contains {_game_name}:

        send "%{@arcadelib.config.prefix.error}% &cI can't create the game &f%{_game_name}% &cbecause it already exists." to console
        return false

    set {arcadelib.data.games?::%{_game_name}%} to "%{_game_name}%"

    send "%{@arcadelib.config.prefix.database}% &fAdded game &a%{arcadelib.data.games?::%{_game_name}%}% &fto ArcadeLib's data." to console

    return true

#Define a game's Waiting lobby
#   game_name: Name of the game
#   lobby_loc: Location of game_name's lobby
function ArcadeLib_SetGameLobby(game_name: text, lobby_loc: location) :: boolean:

    if {arcadelib.data.games?::*} contains {_game_name}:

        set {arcadelib.data.games?::%{_game_name}%::lobby} to {_lobby_loc}
        send "%{@arcadelib.config.prefix.database}% &fAdded lobby of game &a%{arcadelib.data.games?::%{_game_name}%}% &fto ArcadeLib's data." to console
        return true

    else:

        return false

#Define a team's spawn for a game
#   game_name: Name of the game
#   team_name: Name of the team
#   spawn_loc: Location of the team_name's spawn
function ArcadeLib_SetTeamSpawn(game_name: text, team_name: text, spawn_loc: location) :: boolean:

    if {arcadelib.data.games?::*} contains {_game_name}:

        if {arcadelib.data.games?::%{_game_name}%::teams?::*} contains {_team_name}:

            set {arcadelib.data.games?::%{_game_name}%::teams?::%{_team_name}%::spawn} to {_spawn_loc}
            send "%{@arcadelib.config.prefix.database}% &fAdded team &a%{arcadelib.data.games?::%{_game_name}%::teams?::%{_team_name}%}%'s spawn &fto ArcadeLib's data for game &a%{_game_name}%&f." to console
            return true
        
        else:

            send "%{@arcadelib.config.prefix.error}% &cI can't create the team &f%{_team_name}%'s spawn &cbecause the team &f%{_team_name}% &cdoes not exist." to console
            return false
    
    else:

        send "%{@arcadelib.config.prefix.error}% &cI can't create the team &f%{_team_name}%'s spawn &cbecause the game &f%{_game_name}% &cdoes not exist." to console
        return false

#Add a team to a game
#   game_name: Name of the game
#   team_name: Name of the team to add
function ArcadeLib_AddTeam(game_name: text, team_name: text) :: boolean:

    if {arcadelib.data.games?::*} contains {_game_name}:

        if {arcadelib.data.games?::%{_game_name}%::teams?::*} contains {_team_name}:

            send "%{@arcadelib.config.prefix.error}% &cI can't create the team &f%{_team_name}% &cbecause the team &f%{_team_name}% &calready exist." to console
            return false
        
        else:

            set {arcadelib.data.games?::%{_game_name}%::teams?::%{_team_name}%} to "%{_team_name}%"
            send "%{@arcadelib.config.prefix.database}% &fAdded team &a%{arcadelib.data.games?::%{_game_name}%::teams?::%{_team_name}%}% &fto ArcadeLib's data for game &a%{_game_name}%&f." to console
            return true

    else:   

        send "%{@arcadelib.config.prefix.error}% &cI can't create the team &f%{_team_name}% &cbecause the game &f%{_game_name}% &cdoes not exist." to console
        return false

#Add a player to a team
#   game_name: Name of the game
#   team_name: Name of the team
#   player_name: Name of the player
function ArcadeLib_AddPlayerToTeam(game_name: text, team_name: text, player_name: player) :: boolean:

    if {arcadelib.data.games?::*} contains {_game_name}:

        if {arcadelib.data.games?::%{_game_name}%::teams?::*} contains {_team_name}:

            set {arcadelib.data.games?::%{_game_name}%::teams?::%{_team_name}%::players?::%{_player_name}%} to "%{_player_name}%"
            send "%{@arcadelib.config.prefix.database}% &fAdded player &a%{arcadelib.data.games?::%{_game_name}%::teams?::%{_team_name}%::players?::%{_player_name}%}% &fto ArcadeLib's data for game &a%{_game_name}% &fin team &a%{arcadelib.data.games?::%{_game_name}%::teams?::%{_team_name}%}%&f." to console
            return true

        else:

            set {arcadelib.data.games?::%{_game_name}%::teams?::%{_team_name}%} to "%{_team_name}%"
            send "%{@arcadelib.config.prefix.database}% &cI did not find the requested team." to console
            return true

    else:

        send "%{@arcadelib.config.prefix.error}% &cI can't find the game &f%{_game_name}% &cbecause the game &f%{_game_name}% &cdoes not exist." to console
        return false

#Remove a player from a team
#   game_name: Name of the game
#   team_name: Name of the team
#   player_name: Name of the player
function ArcadeLib_RemovePlayerFromTeam(game_name: text, team_name: text, player_name: player) :: boolean:

    if {arcadelib.data.games?::*} contains {_game_name}:

        if {arcadelib.data.games?::%{_game_name}%::teams?::*} contains {_team_name}:

            delete {arcadelib.data.games?::%{_game_name}%::teams?::%{_team_name}%::players?::%{_player_name}%}
            send "%{@arcadelib.config.prefix.database}% &fRemoved player &a%{arcadelib.data.games?::%{_game_name}%::teams?::%{_team_name}%::players?::%{_player_name}%}% &ffrom ArcadeLib's data for game &a%{_game_name}% &fin team &a%{arcadelib.data.games?::%{_game_name}%::teams?::%{_team_name}%}%&f." to console
            return true

        else:

            set {arcadelib.data.games?::%{_game_name}%::teams?::%{_team_name}%} to "%{_team_name}%"
            send "%{@arcadelib.config.prefix.database}% &cI did not find the requested team." to console
            return true

    else:

        send "%{@arcadelib.config.prefix.error}% &cI can't find the game &f%{_game_name}% &cbecause the game &f%{_game_name}% &cdoes not exist." to console
        return false

#Get players in a team
#   game_name: Name of the game
#   team_name: Name of the team
function ArcadeLib_GetPlayersInTeam(game_name: text, team_name: text) :: text:

    if {arcadelib.data.games?::*} contains {_game_name}:

        if {arcadelib.data.games?::%{_game_name}%::teams?::*} contains {_team_name}:

            set {_players::*} to {arcadelib.data.games?::%{_game_name}%::teams?::%{_team_name}%::players?::*}
            return {_players?::*}

        else:

            set {arcadelib.data.games?::%{_game_name}%::teams?::%{_team_name}%} to "%{_team_name}%"
            send "%{@arcadelib.config.prefix.database}% &cI did not find the requested team." to console
            return "true"

    else:

        send "%{@arcadelib.config.prefix.error}% &cI can't find the game &f%{_game_name}% &cbecause the game &f%{_game_name}% &cdoes not exist." to console
        return "false"

#=================================
#       Main Command (Admin)
#=================================

command /arcadelib [<text>] [<text>] [<text>]:

    permission: op
    permission message: &cYou do not have the required permission to perform this command!

    trigger:

        if arg-1 is not set:

            send "%{@arcadelib.config.prefix}% &fVersion %{@arcadelib.version}%" to player